1.自由存储的问题主要包括：内存泄漏，提前释放，重复释放（资源管理器无法追踪资源所有者，属于未定义行为）

2.无法通过推断未限定列表的类型使其做为普通模板实参
    template<class T> void f(T);  f({1,2,3}); //未限定列表与类型T不匹配（无法推断出T的类型为 initializer_list<int>）

3.lambda生成的类对象称为闭包对象，默认等价类的函数调用运算符是const的，声明为mutable的lambda对应的函数调用运算符是非const的

4.名字空间名字和全局变量，无需捕获可直接访问（在对应作用域的前提下）

5.lambda用于成员函数时，通过把this添加到捕获列表，访问对象的成员

6.只包含一条return语句，返回类型可推断，其他情况需要后缀返回类型->

7.递归使用lambda需要知道lambda的类型（不能使用auto推断，使用std::functional<R(AL)>）,
  如果lambda什么都不捕获，则可以复制给一个对应类型的函数指针
  double (*p)(double) = [](double a){return sqrt(a);};

8.void*指针转换为其他类型指针，同一类型层次指针之间的类型转换，用static_cast
  非关联类型的指针类型转换用 reinterpret_cast

9. (T)e为C形式的类型转换，T(e)为函数形式的类型转换，对于内置类型，两种转换等价（T同样为内置类型的情况下）