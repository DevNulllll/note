动态规划入门20
分类：算法与数据结构 

 例题19

调整队形

                       (queue.pas/c/cpp)

来源：TJU P1006

【问题描述】

   学校艺术节上，规定合唱队要参加比赛，各个队员的衣服颜色不能很混乱：合唱队员应排成一横排，且衣服颜色必须是左右对称的。
例如：“红蓝绿蓝红”或“红蓝绿绿蓝红”都是符合的，而“红蓝绿红”或“蓝绿蓝红”就不符合要求。

合唱队人数自然很多，仅现有的同学就可能会有3000个。老师希望将合唱队调整得符合要求，但想要调整尽量少，减少麻烦。以下任一动作认为是一次调整：
1、在队伍左或右边加一个人（衣服颜色依要求而定）；
2、在队伍中任两个人中间插入一个人（衣服颜色依要求而定）；
3、剔掉一个人；
4、让一个人换衣服颜色；
    老师想知道就目前的队形最少的调整次数是多少，请你编一个程序来回答他。

因为加入合唱队很热门，你可以认为人数是无限的，即随时想加一个人都能找到人。同时衣服颜色也是任意的。

 

【输入文件】

第一行是一个整数n(1≤n≤3000)。
第二行是n个整数，从左到右分别表示现有的每个队员衣服的颜色号，都是1到3000的整数。

 

【输出文件】

一个数，即对于输入队列，要调整得符合要求，最少的调整次数。

【输入样例】

5 
1 2 2 4 3 
  
【输出样例】

2

 

【提交链接】

http://oi.tju.edu.cn/problem/submit/1006/

 

【问题分析】

读完题目发现很熟悉，仔细想想这个题就是回文词的加强版。不同与回文词的是这个问题的决策多了，不仅可以插入一个人（词），还可以剔人，还可以换服装，其实剔人和插入是等价的。也就是说比原问题只多了一个条件就是可以换服装。

这样就不能用回文词的第一个方法解了。（因为序列中的元素不固定，可以换）。只能用第二个方法解。

和回文词一样，阶段是序列的长度，状态是opt[i,j]表示[i,j]这段区间内要变成回文所需要的最少的调整次数。

决策比回文词多了一个，即：如果左右两端不一样还可以通过换服装这种方式只花费一次的代价调整好。

状态转移方程：

          min{opt[i,j-1]+1,opt[i+1,j]+1,opt[i+1,j-1]+1}

opt[i,j]=                             (a[i]<>a[j],1<=i<j<=n)

          min{opt[i,j-1]+1,opt[i+1,j]+1,opt[i+1,j-1]}

                                    (a[i]=a[j],1<=i<j<=n)

边界条件:opt[i,i]=0  (1<=i<=n)

时间复杂度：

状态数O（N2）*转移代价O（1）=总复杂度O（N2）

【源代码】

program queue;

const

 fin='queue.in';

 fout='queue.out';

 maxn=3000;

var

 a:array[0..maxn] of longint;

 opt:array[0..maxn,0..maxn] of longint;

 n:longint;

procedure init;

 var

  i:longint;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  readln(n);

  for i:=1 to n do

   read(a[i]);

 end;

procedure main;

 var

  i,j,L:longint;

 begin

  fillchar(opt,sizeof(opt),0);

  for L:=1 to n-1 do

   for i:=1 to n-L do

    begin

     j:=i+L;

     if opt[i+1,j]+1<opt[i,j-1]+1 then

      opt[i,j]:=opt[i+1,j]+1

     else opt[i,j]:=opt[i,j-1]+1;

     if a[i]=a[j] then

      begin

       if opt[i+1,j-1]<opt[i,j] then

        opt[i,j]:=opt[i+1,j-1]

      end

     else begin

           if opt[i+1,j-1]+1<opt[i,j] then

            opt[i,j]:=opt[i+1,j-1]+1;

          end;

    end;

 end;

procedure print;

 begin

  writeln(opt[1,n]);

  close(input);

  close(output);

 end;

begin

 init;

 main;

 print;

end.
