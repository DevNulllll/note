动态规划入门18
分类：算法与数据结构 

2.3最长公共子序列问题

   和前面讲的有所区别，这个问题的不涉及走向。很经典的动态规划问题。

 

 

 例题17

 



 最长公共子序列

(lcs.pas/c/cpp)

来源：《全国青少年信息学奥林匹克联赛培训教材》

巴蜀在线评测系统

【问题描述】

    一个给定序列的子序列是在该序列中删去若干元素后得到的序列。确切地说，若给定序列X= < x1, x2,…, xm>，则另一序列Z= < z1, z2,…, zk>是X的子序列是指存在一个严格递增的下标序列 < i1, i2,…, ik>，使得对于所有j=1,2,…,k有 Xij=Zj
    例如，序列Z=是序列X=的子序列，相应的递增下标序列为<2,3,5,7>。给定两个序列X和Y，当另一序列Z既是X的子序列又是Y的子序列时，称Z是序列X和Y的公共子序列。例如，若X= < A, B, C, B, D, A, B>和Y= < B, D, C, A, B, A>，则序列是X和Y的一个公共子序列，序列也是X和Y的一个公共子序列。而且，后者是X和Y的一个最长公共子序列，因为X和Y没有长度大于4的公共子序列。
    给定两个序列X= < x1, x2, …, xm>和Y= < y1, y2, … , yn>，要求找出X和Y的一个最长公共子序列。

【输入文件】

    输入文件共有两行，每行为一个由大写字母构成的长度不超过200的字符串，表示序列X和Y。

【输出文件】

    输出文件第一行为一个非负整数，表示所求得的最长公共子序列的长度，若不存在公共子序列，则输出文件仅有一行输出一个整数0，否则在输出文件的第二行输出所求得的最长公共子序列(也用一个  大写字母组成的字符串表示。

【输入样例】

ABCBDAB 
BDCBA 
【输出样例】

4 
BCBA 
【提交链接】

http://mail.bashu.cn:8080/JudgeOnline 
【问题分析】

这个问题也是相当经典的。。

这个题目的阶段很不明显，所以初看这个题目没什么头绪，不像前面讲的有很明显的上一步，上一层之类的东西，只是两个字符串而且互相没什么关联。

但仔细分析发现还是有入手点的：

既然说是动态规划，那我们首先要考虑的就是怎么划分子问题，一般对于前面讲到的街道问题和数塔问题涉及走向的，考虑子问题时当然是想上一步是什么？但这个问题没有涉及走向，也没有所谓的上一步，该怎么办呢？

既然是求公共子序列，也就有第一个序列的第i个字符和第二个序列的第j个字符相等的情况。

那么我们枚第一个序列（X）的字符，和第二个序列（Y）的字符。

显然如果X[i]=Y[j]那么起点是1（下面说的子序列都是起点为1的），长度为i的子序列和长度为j的子序列的最长公共子序列就是长度为i-1和长度为j-1 的子序列中最长的公共子序列加上X[i]或Y[j]。

那要是不相等呢？

如果不相等，也就是说第一个序列长度为I的子序列和第二个序列中长度为j的子序列的公共子序列中X[i]和Y[j]不同时出现。也就是说第一个序列长度为i的子序列和第二个序列中长度为j的子序列的公共子序列是第一个序列长度为i的子序列和第二个序列中长度为j-1的子序列或第一个序列长度为i-1的子序列和第二个序列中长度为j的子序列的公共子序列中一个更长的。

设计一个状态opt[i,j] 表示起点为1，第一序列长度为i，第二序列长度为j的子序列的最长公共子序列。按照上面的分类就可以得到状态转移方程：

         opt[i-1,j-1]+x[i]      (x[i]=y[j])

opt[i,j]=  opt[i-1,j]+x[i]        (length(opt[i-1,j])>=length(opt[i,j-1]))   

         opt[i,j-1]+y[j]        (length(opt[i-1,j])<length(opt[i,j-1]))

         (0<i<=length(X),0<j<=length(Y))

复杂度：状态数O（N2）*转移代价O（1）    =O（N2）

【源代码】

program LCS;

const

 fin='LCS.in';

 fout='LCS.out';

 maxn=300;

var

 s1,s2:string;

 opt:array[0..maxn,0..maxn] of string;

 L1,L2:longint;

procedure init;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  readln(s1);

  readln(s2);

  L1:=length(s1);

  L2:=length(s2);

  close(input);

 end;

procedure main;

 var

  i,j:longint;

 begin

  for i:=1 to L1 do

   for j:=1 to L2 do

    opt[i,j]:='';

  for i:=1 to L1 do

   for j:=1 to L2 do

    if s1[i]=s2[j] then

     opt[i,j]:=opt[i-1,j-1]+s1[i]

    else if length(opt[i-1,j])>=length(opt[i,j-1]) then

     opt[i,j]:=opt[i-1,j]

    else opt[i,j]:=opt[i,j-1];

 end;

procedure print;

 begin

  writeln(length(opt[L1,L2]));

  write(opt[L1,L2]);

  close(output);

 end;

begin

 init;

 main;

 print;

end.

