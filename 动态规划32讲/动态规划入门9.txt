动态规划入门9
分类：算法与数据结构 

   回顾上面的内容充分说明动态规划的本质就是递推。其实按照我的理解（动规涉及最优决策，递推是单纯的总结）背包问题的简化版更准确点算是递推而非动态规划，至于动归和递推之间的界线本来就很模糊（至少我这么认为）把它看做什么都可以，没必要咬文嚼字。

   回到0/1背包的原问题上（如果你忘了就去上面看看）。

   如果在不知道这个模型的情况下我们怎么做这个题呢？

   这就要用到第一节提到的方法二：三要素法。

   题目中明确说明对于一个物品要不就拿走要不就放下，其实题目赤裸裸的告诉我们决策就是不拿（用0表示）或拿（用1表示）。这样想都不用想就知道了决策，这也是本题的突破口。知道了决策写个搜索的程序应该是很轻松的了。

   那么阶段是什么呢？

   显然，给你一堆东西让你往包里塞，你当然是一个一个的那来，塞进去。那么阶段很明显就是物品的个数。

   状态又是什么呢？

   有的人在装东西是有个习惯（比如说我）就是先把东西分类，然后把同类的东西打个小包，最后在把小包放进去，我们可以按这个思想给物品打一些小包，也就是按照单位为1的递增的顺序准备好多小包，比如载重是6的包，可以为它准备载重是1，2，3，4，5的小包。这样状态就可以想出来了：

设计状态opt[i，j]表示装第i个物品时载重为j的包可以装到的最大价值。

                       opt[i-1,j]                     (j-w[i]<0，i>0)

状态转移方程：opt[i,j]=max{opt[i-1,j],opt[i-1,j-w[i]]+v[i]} (j-w[i]>=0,i>0)

(w[i]:第i个物品的重量，v[i]第i个物品的价值)

解释：要载重为j的背包空出w[i]（j-w[i]）的空间且装上第i个物品，比不装获得的价值大就装上它。

边界条件：opt[0,i]=0; (i∈{1..S})

注：

   这种二维的状态表示应该在下节讲，但是为了方便理解先在这里说了。

上面的方法动态规划三要素都很明显，实现也很简单。但是在我初学背包时却用另外一种一维的状态表示法。

   用第一节说的思考方法五（放宽约束和增加约束）在重新思考一下这个问题：

怎么放宽约束呢？

   把题目中的价值去掉，不考虑价值即最优就变成背包问题的简化版了。那简化版的求解对我们有何启示呢？

   再一次增加约束：背包只能装满。

   显然对于N个装满背包的方案中只要找到一个价值最大的就是问题的解。那么装不满怎么办呢？其实装不满背包，它总要达到一定的重量（X）。我们可以把这种情况看作是装满一个载重为X的小包。

总结一下上面的思维过程：

   放宽约束让我们找到问题的突破口――和背包问题简化版一样，我们可以却定载重为S的背包是否可以装满。

   增加约束让我们找到问题的求解方法――在装满背包的方案中选择最优的一个方案。

这样问题就解决了。

   设计一个状态opt[j]表示装满载重为j的背包可获得的最大价值。对于第i个物品，只要opt[j-w[i]]可以装满且opt[j-w[i]]+v[i]比opt[j]大就装上这个物品（更新opt[j]）。

   怎么使opt[j]既有是否构成又有最优的概念呢？

   opt[j]只表示最优，只不过使初始条件+1，判断opt[j]是否为0，如果opt[j]=0说明j装不满。

边界条件：opt[0]=1;

状态转移方程：opt[j]=max{opt[j-w[i]]} (0<i<n,w[i]<=j<=S)

问题解： ans=max{opt[i]}-1          (0<i<=s)

时间复杂度：阶段数O(S)*状态数（O(N)）*转移代价（O(1)）=O（SN）

下面看几个例题：

 

例题8


采药

(medic.pas/c/cpp)

来源：NOIP2005（普及组） 第三题

【问题描述】

    辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”
    如果你是辰辰，你能完成这个任务吗？

【输入文件】

    输入文件medic.in的第一行有两个整数T（1 <= T <= 1000）和M（1 <= M <= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。
【输出文件】

    输出文件medic.out包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。

【输入样例】

70 3
71 100
69 1
1 2

【输出样例】

    3

【数据规模】
对于30%的数据，M <= 10；
对于全部的数据，M <= 100。

【问题分析】

这是一道典型的0/1背包问题，把时间看做标准模型中的重量，把规定的时间看做载重为T的背包，这样问题和基本模型就一样了，具体实现这里不多说了。

【源代码1】 {二维状态}

program medic;

const

 fin='medic.in';

 fout='medic.out';

 maxt=1010;

 maxn=110;

var

 opt:array[0..maxn,0..maxt] of longint;

 w,v:array[0..maxn] of longint;

 t,n:longint;

procedure init;

 var

  i:longint;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  read(t,n);

  for i:=1 to n do

   read(w[i],v[i]);

  close(input);

 end;

function max(x,y:longint):longint;

 begin

  if x>y then max:=x

  else max:=y;

 end;

procedure main;

 var

  i,j:longint;

 begin

  fillchar(opt,sizeof(opt),0);

  for i:=1 to n do

   for j:=1 to t do

    if j-w[i]<0 then

     opt[i,j]:=opt[i-1,j]

    else opt[i,j]:=max(opt[i-1,j],opt[i-1,j-w[i]]+v[i]);

 end;

procedure print;

 begin

  writeln(opt[n,t]);

  close(output);

 end;

begin

 init;

 main;

 print;

end.                     

【源代码2】 {一维状态}

program medic;

const

 fin='medic.in';

 fout='medic.out';

 maxt=1010;

 maxn=110;

var

 opt:array[0..maxt] of longint;

 w,v:array[0..maxn] of longint;

 ans,t,n:longint;

procedure init;

 var

  i:longint;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  readln(t,n);

  for i:=1 to n do

   read(w[i],v[i]);

  close(input);

 end;

procedure main;

 var

  i,j:longint;

 begin

  fillchar(opt,sizeof(opt),0);

  opt[0]:=1;

  for i:=1 to n do

   for j:=t downto w[i] do

    if (opt[j-w[i]]>0) and (opt[j-w[i]]+v[i]>opt[j]) then

     opt[j]:=opt[j-w[i]]+v[i];

  ans:=-maxlongint;

  for i:=1 to t do

   if opt[i]>ans then ans:=opt[i];

 end;

procedure print;

 begin

  writeln(ans-1);

  close(output);

 end;

begin

 init;

 main;

 print;

end.

