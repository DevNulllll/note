动态规划入门30
分类：算法与数据结构 

4.树型动态规划

   由于树型动态规划比较特殊，要借助树这种数据结构，所以很多地方都把它独立看做一类，我也不例外。

   一般树型动态规划都是建立在二叉树上的，对于普通的树和森林要把它们转化成二叉树，以前认为数据结构中将的转化没什么用处，现在终于用到了。

   树型动态规划是动态规划类中最好分析的，因为树本来就是一个低归的结构，阶段，状态，决策都很明显，子问题就是子树的最优值，也很明显。

   较其他类型的动态规划不同的是，求解树型动态规划的第一步一般要先建立数据结构，考虑问题的数据结构是二叉树呢？还是多叉树，还是森林……

   其他类型的动态规划一般都是用逆向递推实现，而树型动态规划一般要正向求解，为了保证时间效率要加记忆化（即长说的记忆化搜索）。

树型动态规划的三要素：

阶段：树的层数

状态：树中的结点

决策：某个子数的最优，或所有子树的最优和，或某几个子树的最优

    通过上面的决策，发现如果是一棵多叉树，针对求某几个（>=1）子树的最优解，决策会很多。以至于我们没发写出准确的状态转移方程。这就是我们为什么要把多叉数转化成二叉数的原因。（当然，如果问题是求所有子树的和，就没必要转化了，如URAL P1039 没有上司的舞会）。

    如果把多叉树或森林转化成二叉树要注意，左儿子和根结点是父子关系，而右儿子在原问题中和跟结点是兄弟关系。（这个数据结构掌握扎实的应该能明白，不理解的就去看数据结构方面的知识）。

用邻接矩阵存多叉树，转化成二叉树的部分代码（可能有语法错误）

G: 存图，F[i] 表示第i个结点的儿子应该插入的位置

W：结点的值 BT：二叉树

Procedure creat_tree(T:tree);

 Var

   i:longint;

Begin

  for i:=1 to n do

   Begin

    for j:=1 to n do

     If g[i,j] then

      Begin

       If  F[i]=0 then

        BT[i].L:=j

       Else  BT[F[i]].r:=j;

       F[i]:=j;

      End;

   End;

End;

  下面同过例题看一下树型动态规划的具体实现：

 

 

例题29

加分二叉树

(binary.pas/c/cpp)

来源：NOIP2003（提高组）

【问题描述】

    设一个n个节点的二叉树tree的中序遍历为（l,2,3,…,n），其中数字1,2,3,…,n为节点编号。每个节点都有一个分数（均为正整数），记第i个节点的分数为di，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：

    subtree的左子树的加分× subtree的右子树的加分＋subtree的根的分数

    若某个子树为空，规定其加分为1，叶子的加分就是叶节点本身的分数。不考虑它的空

子树。

    试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。要求输出；

    （1）tree的最高加分

    （2）tree的前序遍历

【输入格式】

    第1行：一个整数n（n＜30），为节点个数。

    第2行：n个用空格隔开的整数，为每个节点的分数（分数＜100）。

【输出格式】

    第1行：一个整数，为最高加分（结果不会超过4,000,000,000）。

    第2行：n个用空格隔开的整数，为该树的前序遍历。

【输入样例】

    5

    5 7 1 2 10

【输出样例】

    145

    3 1 2 4 5

【问题分析】

根据题目描述就可以看出是典型的树型动态规划，而且题目中已经给出了加分的求法：

    subtree的左子树的加分× subtree的右子树的加分＋subtree的根的分数

这估计是最简单的题目了。

但是有一点需要注意：我们应该怎么建树？

其实这个题不用建树，这就需要我们对数据结构掌握的很扎实。

题目中说这个树的中序遍历是1，2，3……N，我们要求的是树的先序，这样马上就想到怎样用中序和先序确定一棵树。

枚举树根i那么1，2……i-1就是它的左子树中的结点，i+1……N就是它右子树中的结点。这样一颗树按这样的低归定义就构造出来了，（当然我们只要这个过程并不需要存储这棵树）。在构造过程中顺便求出加分来，在一个序列里不同的元素做根显然加分不同，我们只要记录一个最大的就可以了。

具体实现方法：

设计状态opt[L,r]表示以L为起点，以r为终点的结点所组成的树的最高加分，阶段就是树的层数。决策就是在这些结点中找一个结点做根使树的加分最大，状态转移方程：

            1                             (L>r)

opt[L,r] =  a[L]                           (L=r)

          max{opt[L,i-1]*opt[i+1,r]+a[i]}     (L<r,L<=i<=r)

在保存最优解的过程用path[i,j]记录以i为起点，以j为终点的中序结点中的根就可以了。

由于树型动态规划的阶段不明显所以一般用记忆化搜索好实现。

时间复杂度：状态数O(N2)*转移代价O(N)=O（N3）

【源代码】

program binary;

const

 fin='binary.in';

 fout='binary.out';

 maxn=100;

var

 a:array[0..maxn] of longint;

 path,opt:array[0..maxn,0..maxn] of longint;

 n:longint;

procedure init;

 var

  i:longint;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  read(n);

  for i:=1 to n do

   read(a[i]);

  close(input);

  fillchar(opt,sizeof(opt),0);

 end;

function TreeDp(L,r:longint):longint;

 var

  i,x:longint;

 begin

  if opt[L,r]=0 then

   begin

    if L>r then

     begin

      opt[L,r]:=1;

      path[L,r]:=0;

     end

    else if L=r then

     begin

      opt[L,r]:=a[L];

      path[L,r]:=L;

     end

    else begin

          for i:=L to r do

           begin

            x:=TreeDp(L,i-1)*TreeDp(i+1,r)+a[i];

            if x>opt[L,r] then

             begin

              opt[L,r]:=x;

              path[L,r]:=i;

             end;

           end;

         end;

   end;

  TreeDp:=opt[L,r];

 end;

procedure print(L,r:longint);

 begin

  if path[L,r]>0 then

   begin

    write(path[L,r],' ');

    print(L,path[L,r]-1);

    print(path[L,r]+1,r);

   end;

 end;

begin

 init;

 writeln(TreeDp(1,n));

 print(1,n);

 close(output);

end.          
