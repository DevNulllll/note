动态规划入门21
分类：算法与数据结构 

2.4 背包问题的拓展

前面说的背包问题还有个有趣的变形，可以说是背包问题的拓展吧，下面看一下这个例题：

 例题20

找啊找啊找GF

(gf.pas/c/cpp)

来源：MM群2007七夕模拟赛（RQNOJ 57）

【问题描述】

    "找啊找啊找GF,找到一个好GF,吃顿饭啊拉拉手,你是我的好GF.再见."

"诶,别再见啊..."

七夕...七夕...七夕这个日子,对于sqybi这种单身的菜鸟来说是多么的痛苦...虽然他听着这首叫做"找啊找啊找GF"的歌,他还是很痛苦.为了避免这种痛苦,sqybi决定要给自己找点事情干.他去找到了七夕模拟赛的负责人zmc MM,让她给自己一个出题的任务.经过几天的死缠烂打,zmc MM终于同意了.

但是,拿到这个任务的sqybi发现,原来出题比单身更让人感到无聊-_-....所以,他决定了,要在出题的同时去办另一件能够使自己不无聊的事情--给自己找GF.

sqybi现在看中了n个MM,我们不妨把她们编号1到n.请MM吃饭是要花钱的,我们假设请i号MM吃饭要花rmb[i]块大洋.而希望骗MM当自己GF是要费人品的,我们假设请第i号MM吃饭试图让她当自己GF的行为(不妨称作泡该MM)要耗费rp[i]的人品.而对于每一个MM来说,sqybi都有一个对应的搞定她的时间,对于第i个MM来说叫做time[i]. sqybi保证自己有足够的魅力用time[i]的时间搞定第i个MM^_^.

sqybi希望搞到尽量多的MM当自己的GF,这点是毋庸置疑的.但他不希望为此花费太多的时间(毕竟七夕赛的题目还没出),所以他希望在保证搞到MM数量最多的情况下花费的总时间最少.

   sqybi现在有m块大洋,他也通过一段时间的努力攒到了r的人品(这次为模拟赛出题也攒rp哦~~).他凭借这些大洋和人品可以泡到一些MM.他想知道,自己泡到最多的MM花费的最少时间是多少.

注意sqybi在一个时刻只能去泡一个MM--如果同时泡两个或以上的MM的话,她们会打起来的...

【输入文件】

输入的第一行是n,表示sqybi看中的MM数量.

接下来有n行,依次表示编号为1, 2, 3, ..., n的一个MM的信息.每行表示一个MM的信息,有三个整数:rmb, rp和time.

最后一行有两个整数,分别为m和r.

【输出文件】

你只需要输出一行,其中有一个整数,表示sqybi在保证MM数量的情况下花费的最少总时间是多少.

【输入样例】

4

1 2 5

2 1 6

2 2 2

2 2 3

5 5

【输出样例】

 13

【数据规模】

对于20%数据,1<=n<=10;

对于100%数据,1<=rmb<=100,1<=rp<=100,1<=time<=1000;

对于100%数据,1<=m<=100,1<=r<=100,1<=n<=100.

【提交链接】

http://www.rqnoj.cn/Submit.asp

【问题分析】

初看问题觉得条件太多，理不出头绪来，所以要将问题简化，看能否找出熟悉的模型来，如果我们只考虑钱够不够，或只考虑RP够不够。并且不考虑花费的时间。这样原问题可以简化成下面的问题：

在给定M元RMB（或R单位RP，RP该用什么单位呢？汗。。。）的前题下，去泡足够多的MM，很显然这个问题就是典型的0/1背包问题了。

可以把泡MM用的RMB（或RP看做重量），泡到MM的个数看做价值，给定的M（或R）就是背包的载重。求解这个问题很轻松喽。

但是，这个问题既要考虑RMB有要考虑RP怎么办呢？

解决这个问题很容易啊，要是你有足够的RMB去泡第i个MM而RP不够就泡不成了，要是RP够就可以。也就是在原来问题的基础上在状态加一维。

那要是在考虑上时间最小怎么办呢？

这个也很好说，在求解过程中如果花X元RMP，Y单位RP可以到Z个MM，那么在泡第i个MM时，发现可以用X-rmb[i]元，Y-rp[i]单位RP泡到的MM数加上这个MM（也就是+1）比原来Z多，就替换它（因为你的原则是尽量多的泡MM），如果和Z一样多，这是就要考虑原来花的时间多呢，还是现在花的时间多。要是原来的多，就把时间替换成现在用的时间（因为你既然可以泡到相同数量的MM当然要省点时间去出题）。

设计一个二维状态opt[j,k]表示正好花j元RMP，k单位RP可以泡到的最多的MM的数量。增加一个辅助的状态ct[k,j]表示正好花j元RMP，k单位RP可以泡到的最多MM的情况下花费的最少的时间。

边界条件 opt[0,0]=1    (按题意应该是0，但为了标记花费是否正好设为1，这样，opt[j,k]>0说明花费正好)

状态转移方程：

opt[j,k]=max{opt[j-rmb[i],k-rp[i]]+1}

(rmb[i]<=j<=m,rp[i]<=k<=r,0<i<=n,opt[j-rmb[i],k-rp[i]]>0)

ct[j,k]:=min{ct[j-rmb[i],k-rp[i]]}+time[i]  (opt[j,k]=opt[j-rmb[i],k-rp[i]]+1)

时间复杂度：

阶段数 O（N）*状态数O（MR）*转移代价O（1）=    O（NMR）

注：数据挺小的。

问题拓展：

如果要加入别的条件，比如泡MM还要一定的SP，等也就是说一个价值要不同的条件确定，那么这个问题的状态就需要在加一维，多一个条件就多一维。

【源代码】

program gf;

const

 fin='gf.in';

 fout='gf.out';

 maxn=110;

var

 rmb,rp,time:array[0..maxn] of longint;

 opt,ct:array[0..maxn,0..maxn] of longint;

 n,m,r,ans,max:longint;

procedure init;

 var

  i:longint;

 begin

  assign(input,fin);

  reset(input);

  assign(output,fout);

  rewrite(output);

  read(n);

  for i:=1 to n do

   read(rmb[i],rp[i],time[i]);

  read(m,r);

  close(input);

 end;

procedure main;

 var

  i,j,k:longint;

 begin

  fillchar(opt,sizeof(opt),0);

  fillchar(ct,sizeof(ct),0);

  opt[0,0]:=1;

  for i:=1 to n do

   for j:=m downto rmb[i] do

    for k:=r downto rp[i] do

     if opt[j-rmb[i],k-rp[i]]>0 then

      begin

       if opt[j-rmb[i],k-rp[i]]+1>opt[j,k] then

        begin

         opt[j,k]:=opt[j-rmb[i],k-rp[i]]+1;

         ct[j,k]:=ct[j-rmb[i],k-rp[i]]+time[i];

        end

       else if (opt[j-rmb[i],k-rp[i]]+1=opt[j,k])

             and (ct[j-rmb[i],k-rp[i]]+time[i]<ct[j,k]) then

              ct[j,k]:=ct[j-rmb[i],k-rp[i]]+time[i];

      end;

  max:=0;

  for j:=1 to m do

   for k:=1 to r do

    if opt[j,k]>max then

     begin

      max:=opt[j,k];

      ans:=ct[j,k];

     end

   else if (opt[j,k]=max) and (ct[j,k]<ans) then

    ans:=ct[j,k];

 end;

procedure print;

 begin

  writeln(ans);

  close(output);

 end;

begin

 init;

 main;

 print;

end.

