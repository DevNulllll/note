动态规划入门32
分类：算法与数据结构 

例题31 

选课

来源：VIJOS P1180

【问题描述】

学校实行学分制。每门的必修课都有固定的学分，同时还必须获得相应的选修课程学分。学校开设了N（N<300）门的选修课程，每个学生可选课程的数量M是给定的。学生选修了这M门课并考核通过就能获得相应的学分。
　　在选修课程中，有些课程可以直接选修，有些课程需要一定的基础知识，必须在选了其它的一些课程的基础上才能选修。例如《Frontpage》必须在选修了《Windows操作基础》之后才能选修。我们称《Windows操作基础》是《Frontpage》的先修课。每门课的直接先修课最多只有一门。两门课也可能存在相同的先修课。每门课都有一个课号，依次为1，2，3，…。例如:
   表中1是2的先修课，2是3、4的先修课。如果要选3，那么1和2都一定已被选修过。　　你的任务是为自己确定一个选课方案，使得你能得到的学分最多，并且必须满足先修课优先的原则。假定课程之间不存在时间上的冲突。

【输入文件】

输入文件的第一行包括两个整数N、M（中间用一个空格隔开）其中1≤N≤300,1≤M≤N。

以下N行每行代表一门课。课号依次为1，2，…，N。每行有两个数（用一个空格隔开），第一个数为这门课先修课的课号（若不存在先修课则该项为0），第二个数为这门课的学分。学分是不超过10的正整数。

【输出文件】

  输出文件只有一个数,实际所选课程的学分总数。

【输入样例】

7 4

2 2

0 1

0 4

2 1

7 1

7 6

2 2

【输出样例】

13

【问题分析】

事先说明题目描述有个漏洞，应该是二个以上的课程可能有同一个先修课。

换句话讲，一个课程可能是多个课程的先修课，可是一个课最多只有一个先修课。这样的描述好象和我们以前学过的一种数据结构的描述一样。

你想对了，就是树。

因为是建立在树这种数据结构上的最优化问题，我们自然想到了树型动态规划。想到树型动态规划，那么第一步就是想这课树是否是二叉树，如果不是，是否需要转化呢？

显然这个问题不是二叉树，有应为问题是在多个课程中选M个，也就是说是树中一棵或多棵子树的最优解，这样问题就需要转化成二叉树了。注意题目中说一个课程没有先修课是0，也就是说这课树的根是0。

把数据结构确定了以后就要想动态规划的三要素了。

树型动态规划阶段的具有共性：树的层数，

状态是结点，但是只描述结点显然不够，需要在加一个参数。于是我们想到设计一个状态opt[i,j]表示以i为跟的树，选j个课程可获得的最优解。

因为树是以0为根的而0又必须要选所以问题的解不是opt[0,m]而是opt[0,m+1]。

决策是什么呢？

对于二叉树我在设计决策时习惯分类讨论这样结构清晰。

<1>这棵树只有左子树：

要选左子树中的课程，那么根结点一定要选，所以决策就是在左子树中选j-1个课程，在加上选根结点可获得的分数。

<2>这棵树只有右子树：

    因为右子树和根在原问题中是兄弟关系，所以选右子树中的课程未必要选根，这样决策就有两条：（1）在右子树中选j个的最优值。（2）在右子树中选j-1个的最优值加上选根结点可获得的分数。

 

<3>都有：

    这种情况的决策很容易想到，从左子树中选k-1个，从右子树中选j-k个的最优值加上根结点可获得的分数。

    但要注意，当K=1也就是左子树选0个时，根结点可以不选，右子树可以选j个而不是j-1个；当然根结点也可以选，选了根结点右子树就得选j-1个了。

针对不同情况写出状态转移方程：

max(opt[t[i].L,j-1]+t[i].data)                   （只有左子树）

opt[i,j] = max(opt[t[i].r,j-1]+t[i].data, opt[t[i].r,j])           （只有右子树）

        max(opt[t[i].L,k-1]+opt[t[i].r,j-k]+t[i].data,opt[t[i].r,j])（都有） 

(1<=k<=j)

时间复杂度：

    状态数O（NM）*转移代价O（M）=O（NM2）

注：（1）实际转移代价比理论值小的多。

【源代码】

program P1180;

const

maxn=400;

type

 treetype=record

           data,L,r:longint;

          end;

var

 T:array[0..maxn] of treetype;

 opt:array[0..maxn,0..maxn] of longint;

 n,m,ans:longint;

 F:array[0..maxn] of longint;

procedure init;

 var

  i,x,y:longint;

 begin

  read(n,m);

  fillchar(f,sizeof(f),0);

  for i:=0 to n do

   begin

    T[i].L:=-1;

    T[i].r:=-1;

   end;

  for i:=1 to n do

   begin

    read(x,y);                         {边读入边将多叉树转化成二叉树}

    T[i].data:=y;

    if F[x]=0 then T[x].L:=i

    else T[F[x]].r:=i;

    F[x]:=i;

   end;

  fillchar(opt,sizeof(opt),200);

  for i:=0 to n do

   opt[i,0]:=0;

 end;

function max(x,y:longint):longint;

 begin

  max:=y;

  if x>y then max:=x;

 end;

function TreeDp(i,j:longint):longint;

 var

  k:longint;

 begin

  if opt[i,j]<0 then

   begin

    if (T[i].L<0) and (T[i].r<0) then

     begin

      if j<>1 then opt[i,j]:=0

      else opt[i,j]:=T[i].data;

     end

    else if (T[i].L>=0) and (T[i].r<0) then

     opt[i,j]:=max(opt[i,j],TreeDp(T[i].L,j-1)+T[i].data)

    else if (T[i].L<0) and (T[i].r>=0) then

     begin

      opt[i,j]:=max(opt[i,j],TreeDp(T[i].r,j));

      opt[i,j]:=max(opt[i,j],TreeDp(T[i].r,j-1)+T[i].data);

     end

    else begin

          opt[i,j]:=max(opt[i,j],TreeDp(T[i].r,j));

          for k:=1 to j do

           opt[i,j]:=max(opt[i,j],TreeDp(T[i].L,k-1)+

TreeDp(T[i].r,j-k)+T[i].data);

         end;

   end;

  TreeDp:=opt[i,j];

 end;

begin

 init;

 writeln(TreeDp(0,m+1));

end.
